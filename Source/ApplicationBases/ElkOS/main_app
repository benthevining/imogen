#!/usr/bin/env python3
'''elk_juce_example_main : glue app example for JUCE example '''

__copyright__   = 'Copyright (C) 2021 by Ben Vining'
__license__ = "GPL-3.0"

import time

from elkpy import sushicontroller as sc
from elkpy import sushiprocessor as sp

from elk_ui import ElkUIController

# TODO: Check if these can be removed completely
#from demo_opts import get_device
#from luma.core.render import canvas

import liblo

BRIDGE_TO_GUI_PORT = 25024
# Replace with your local ip address on which to receive updates
GUI_APP_ADDRESS = ('10.42.0.1', BRIDGE_TO_GUI_PORT)

PROCESSOR_NAME = 'imogen'

FADER_PARAMETERS = [ 'Cutoff', 'Resonance', 'Room Size', 'Damping' ]

GUI_PATHS = {
    FADER_PARAMETERS[0] : '/parameter/elk_juce_example/Cutoff',
    FADER_PARAMETERS[1] : '/parameter/elk_juce_example/Resonance',
    FADER_PARAMETERS[2] : '/parameter/elk_juce_example/Room_Size',
    FADER_PARAMETERS[3] : '/parameter/elk_juce_example/Damping'
}


class ImogenBridge(object):

    def __init__(self):
        self.ui = ElkUIController(self.handle_faders,
                                   self.handle_buttons,
                                   self.handle_encoder_button_press,
                                   self.handle_encoder_button_turn)
        self.sushi = sc.SushiController()
        self.processor = sp.SushiProcessor(PROCESSOR_NAME, self.sushi)


    # Minimal event loop
    def run(self): 
        self.ui.run()
        while True:
            self.refresh_sliders()
            self.ui.refresh()
            time.sleep(0.05)


    # Transmit the value to OSC remote (GUI for example)
    def transmit_value(self, parameter, value):
        osc_msg = liblo.Message(GUI_PATHS[parameter])
        osc_msg.add(('f', float(value)))
        liblo.send(GUI_APP_ADDRESS, osc_msg)


    # Query Sushi for parameter values and update the display accordingly
    def refresh_sliders(self):
        for idx, parameter in enumerate(FADER_PARAMETERS):
            value = self.processor.get_parameter_value(parameter)

            if self.ui._fader_values[idx] != value:
                self.ui._fader_values[idx] = value
                self.draw(parameter, value)

    # Re-draw display
    def draw(self, parameter, value):
        self.ui.set_display_lines(["Param: %s" % parameter, "Value: %.2f" % value])


    # Callback for faders -- send parameter changes to plugin and update display
    def handle_faders(self, idx, val):
        parameter = FADER_PARAMETERS[idx]
        self.processor.set_parameter_value(parameter, val)
        self.draw(parameter, val)

        self.transmit_value(parameter, val)


    # Callback for buttons -- transmit to plugin and update display/LEDs
    def handle_buttons(self, idx, val):
        # C3 + C scale from C4 to C5
        BUTTON_MIDI_NOTES = [ 48, 60, 62, 64, 65, 67, 69, 71, 72 ]

        self.sushi.keyboard.send_note_on(0, 0, BUTTON_MIDI_NOTES[idx], val)
        self.ui.set_led(idx, val)


    # Callback for rotary encoder button presses
    def handle_encoder_button_press(self, val):
    	# val: button status - 1 if pressed, 0 if released


  	# Callback called when the encoder is turned
    def handle_encoder_button_turn(self, direction):
    	# direction - +1 if turned right, -1 if turned left



if __name__ == '__main__':
    bridge = ImogenBridge()
    bridge.run()
